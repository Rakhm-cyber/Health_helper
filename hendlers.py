from aiogram import Bot, Router, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import CallbackQuery
from db import db, save_user_data, get_weight, get_water
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from gigachat_recomendations import physical_activity_recommendations, nutrition_recommendations

import asyncpg
from datetime import time, datetime

user_states = {}

quiz_data = [
    {
        "question": "–í –∫–∞–∫–æ–º –º—è—Å–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ–ª–∫–∞?",
        "options": ["–ö—É—Ä–∏—Ü–∞", "–†—ã–±–∞", "–ì–æ–≤—è–¥–∏–Ω–∞"],
        "correct_option": 0 
    },
    {
        "question": "—Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ–ª–æ–≤–µ–∫—É –≤ —Å—É—Ç–∫–∏?",
        "options": ["1-2 –ª–∏—Ç—Ä–∞", "2,5-3,5 –ª–∏—Ç—Ä–æ–≤ ", "–æ—Ç 3 –ª–∏—Ç—Ä–æ–≤"],
        "correct_option": 1
    },
    {
        "question": "–ì–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–µ—Ç—á–∞—Ç–∫–∏?",
        "options": ["–∫–∞–ø—É—Å—Ç–∞", "–¢–æ–º–∞—Ç—ã", "–§–∞—Å–æ–ª—å"],
        "correct_option": 2
    },
        {
        "question": "–ö–∞–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?",
        "options": ["–ô–æ–≥–∞", "–ë–µ–≥", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
        "correct_option": 1
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—Ç–æ–ª—è–µ—Ç –∂–∞–∂–¥—É?",
        "options": ["–ö–æ—Ñ–µ", "–°–ª–∞–¥–∫–∏–µ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", "–í–æ–¥–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –µ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –°?",
        "options": ["–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ö–∏–≤–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–∞—è –ø–∏—â–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã?",
        "options": ["–û—Ä–µ—Ö–∏", "–°–ª–∞–¥–∫–∏–µ –∏–∑–¥–µ–ª–∏—è", "–§–∞—Å—Ç—Ñ—É–¥"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–∏–±–æ–ª–µ–µ –±–æ–≥–∞—Ç –Ω–∞ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã?",
        "options": ["–õ–æ—Å–æ—Å—å", "–Ø–π—Ü–∞", "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—â–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤?",
        "options": ["–í–∞—Ä–∫–∞", "–û–±–∂–∞—Ä–∏–≤–∞–Ω–∏–µ", "–ü–∞—Ä–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –º–∏–Ω–µ—Ä–∞–ª–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è?",
        "options": ["–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ –±–µ–∑ –≥–∞–∑–æ–≤", "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ —Å –≥–∞–∑–æ–º", "–°–ª–∞–¥–∫–∞—è –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞"],
        "correct_option": 0
    }
]


router = Router()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")],
        [KeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)


recommendation_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ", callback_data="physical_recommendations"),
            InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data="nutrition_recommendations"),
        ]
    ]
)

edit_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age"),
        ],
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç", callback_data="edit_height"),
        ],
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data="edit_weight"),
        ]
    ]
)


class EditProfile(StatesGroup):
    age = State()
    height = State()
    weight = State()


class Registration(StatesGroup):
    name = State()
    mob_number = State()
    age = State()
    gender = State()
    height = State()
    weight = State()

class WaterReminderStates(StatesGroup):
    start_time = State()
    end_time = State()



@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_project_info(message: types.Message):
    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ª–∏—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞"
        '"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"'
        "–ú–ò–≠–ú –ù–ò–£ –í–®–≠ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ë–ò–í234:\n"
        "- –ù–∞—É–º–æ–≤—ã–º –í–∏—Ç–∞–ª–∏–µ–º\n"
        "- –†–∞—Ö–º–∞—Ç—É–ª–ª–∏–Ω—ã–º –ê–π–≥–∏–∑–æ–º."
    )


@router.message(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: types.Message):
    await message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:\n"
        "[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram (1)](https://t.me/neeeeectdis)\n"
        "[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram (2)](https://t.me/veetalya)",
        parse_mode="Markdown"
    )


@router.message(lambda message: message.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ")
async def start_quiz(message: types.Message):
    user_states[message.from_user.id] = 0
    question_index = user_states[message.from_user.id]
    question_data = quiz_data[question_index]

    await message.answer(
        question_data["question"],
        reply_markup=generate_quiz_keyboard(question_index)
    )

def generate_quiz_keyboard(question_index: int):
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=f"quiz_{question_index}_{i}")]
        for i, option in enumerate(quiz_data[question_index]["options"])
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)





@router.callback_query(lambda callback: callback.data.startswith("quiz_"))
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    _, question_index, option_index = callback_query.data.split("_")
    question_index = int(question_index)
    option_index = int(option_index)

    question_data = quiz_data[question_index]
    correct_option = question_data["correct_option"]

    if option_index == correct_option:
        await callback_query.message.edit_text("–í–µ—Ä–Ω–æ! üéâ")
    else:
        await callback_query.message.edit_text(
            f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}."
        )

    next_question_index = question_index + 1
    if next_question_index < len(quiz_data):
        user_states[callback_query.from_user.id] = next_question_index
        next_question_data = quiz_data[next_question_index]

        await callback_query.message.answer(
            next_question_data["question"],
            reply_markup=generate_quiz_keyboard(next_question_index)
        )
    else:
        await callback_query.message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üéâ")

    await callback_query.answer()



@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç.\n–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}",
        reply_markup = main_keyboard
    )


@router.message(Command('registration'))
async def reg_first(message: Message, state: FSMContext):
    await state.set_state(Registration.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

@router.message(Registration.name)
async def reg_second(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.mob_number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

@router.message(Registration.mob_number)
async def reg_third(message: Message, state: FSMContext):
    await state.update_data(mob_number=message.text)
    await state.set_state(Registration.age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')

@router.message(Registration.age)
async def reg_fourth(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
        return
    await state.update_data(age=message.text)
    await state.set_state(Registration.gender)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª(–º/–∂):')

@router.message(Registration.gender)
async def reg_fifth(message: Message, state: FSMContext):
    if message.text != "–º" and message.text != "–∂":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(–º/–∂)")
        return
    await state.update_data(gender=message.text)
    await state.set_state(Registration.height)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):')

@router.message(Registration.height)
async def reg_sixth(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")
        return
    await state.update_data(height=message.text)
    await state.set_state(Registration.weight)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å:')

@router.message(Registration.weight)
async def reg_seventh(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        return

    await state.update_data(weight=message.text)

    data = await state.get_data()
    print(data)
    await save_user_data(
        db=db,
        user_id=message.from_user.id,
        name=data.get("name"),
        mob_number=data.get("mob_number"),
        age=int(data.get("age")),
        gender=data.get("gender"),
        height=int(data.get("height")),
        weight=int(data.get("weight"))
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=recommendation_keyboard
    )
    await state.clear()


@router.callback_query(lambda c: c.data == "physical_recommendations")
async def physical_recommendations(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    query = """
    SELECT age, gender, height, weight
    FROM users
    WHERE user_id = $1
    """
    user_data = await db.fetch(query, user_id)
    user_data = user_data[0]
    recommendation = await physical_activity_recommendations(user_data['age'], user_data['gender'], user_data['height'], user_data['weight'])
    await callback.message.answer(f"{recommendation}", parse_mode="Markdown")
    await callback.answer()


@router.callback_query(lambda c: c.data == "nutrition_recommendations")
async def nutrition_recommendations_h(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    query = """
    SELECT age, gender, height, weight
    FROM users
    WHERE user_id = $1
    """
    user_data = await db.fetch(query, user_id)
    user_data = user_data[0]
    recommendation = await nutrition_recommendations(user_data['age'], user_data['gender'], user_data['height'], user_data['weight'])
    await callback.message.answer(f"{recommendation}", parse_mode="Markdown")
    await callback.answer()



@router.message(Command('profile'))
async def show_profile(message: Message):
    user_id = message.from_user.id

    query = """
    SELECT name, mob_number, age, gender, height, weight
    FROM users
    WHERE user_id = $1
    """
    user_data = await db.fetch(query, user_id)

    if not user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /registration.")
        return
    user_data = user_data[0]
    profile_text = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user_data['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['mob_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ª: {user_data['gender'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–†–æ—Å—Ç: {user_data['height'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–í–µ—Å: {user_data['weight'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å."
    )

    await message.answer(profile_text)




@router.message(Command('edit'))
async def edit_profile(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_keyboard)

@router.callback_query(lambda c: c.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(EditProfile.age)
    await callback.answer()

@router.message(EditProfile.age)
async def update_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
        return

    new_age = int(message.text)
    user_id = message.from_user.id
    query = "UPDATE users SET age = $1 WHERE user_id = $2"
    await db.execute(query, new_age, user_id)

    await message.answer("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()


@router.callback_query(lambda c: c.data == "edit_height")
async def edit_height(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):")
    await state.set_state(EditProfile.height)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–æ—Å—Ç–∞
    await callback.answer()

@router.message(EditProfile.height)
async def update_height(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")
        return

    new_height = int(message.text)
    user_id = message.from_user.id
    query = "UPDATE users SET height = $1 WHERE user_id = $2"
    await db.execute(query, new_height, user_id)

    await message.answer("–í–∞—à —Ä–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()


@router.callback_query(lambda c: c.data == "edit_weight")
async def edit_weight(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")
    await state.set_state(EditProfile.weight)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–µ—Å–∞
    await callback.answer()

@router.message(EditProfile.weight)
async def update_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        return

    new_weight = int(message.text)
    user_id = message.from_user.id
    query = "UPDATE users SET weight = $1 WHERE user_id = $2"
    await db.execute(query, new_weight, user_id)

    await message.answer("–í–∞—à –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()

async def send_water_reminder(id, bot, start_time: time, end_time: time):
    current_time = datetime.now().time()
    if start_time <= current_time <= end_time:
        water_remind_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–ø–∏–ª!", callback_data="drink_water")],
                [InlineKeyboardButton(text="–û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", callback_data="disable_reminders")]
            ]
        )
        await bot.send_message(id, "–í—ã–ø–µ–π —Å—Ç–∞–∫–∞–Ω –≤–æ–¥—ã!", reply_markup=water_remind_keyboard)

async def send_water_result(id: int, bot: Bot):
    total_water = get_water(db, user_id, datetime.now().date())
    weight = get_weight(db, user_id)
    should = weight * 30
    message = ""
    if total_water/should >= 1:
        message = "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é, –í—ã —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!"
    if total_water/should > 0,7:
        message = "–í—ã –ø–æ—á—Ç–∏ —Å–ø—Ä–∞–≤–∏–ª–∏—Å—å!"
    if total_water/should < 0,7:
        message = "–í–∞–º —Å—Ç–æ–∏—Ç –ø–∏—Ç—å –±–æ–ª—å—à–µ."
    await bot.send_message(id, f"–°–µ–≥–æ–¥–Ω—è –≤—ã –≤—ã–ø–∏–ª–∏ {total_water} –º–ª –≤–æ–¥—ã.\n" + message)

@router.message(Command('water_remind'))
async def water_remind(message: Message, bot: Bot, scheduler: AsyncIOScheduler, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞—á–∞–ª–æ –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
    await state.set_state(WaterReminderStates.start_time)

@router.message(WaterReminderStates.start_time)
async def set_start_time(message: Message, state: FSMContext):
    try:
        start_time = datetime.strptime(message.text, "%H:%M").time()
        await state.update_data(start_time=start_time)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω–µ—Ü –¥–Ω—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM")
        await state.set_state(WaterReminderStates.end_time)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –§–æ—Ä–º–∞—Ç: HH:MM")

@router.message(WaterReminderStates.end_time)
async def set_end_time(message: Message, bot: Bot, scheduler: AsyncIOScheduler, state: FSMContext):
    try:
        end_time = datetime.strptime(message.text, "%H:%M").time()
        data = await state.get_data()
        start_time = data.get("start_time")

        today = datetime.today()
        start_datetime = datetime.combine(today, start_time)
        end_datetime = datetime.combine(today, end_time)

        if start_time >= end_time:
            await message.answer("–ö–æ–Ω–µ—Ü –¥–Ω—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–∑–∂–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
            return

        user_id = message.from_user.id

        weight = await get_weight(db, user_id)
        
        water = weight * 30

        cups = round(water / 250)

        time_difference = (end_datetime - start_datetime).total_seconds()

        interval = round(time_difference / cups)

        await message.answer(f"–£—á–∏—Ç—ã–≤–∞—è –≤–∞—à –≤–µ—Å {weight} –∫–≥, –≤–∞–º —Å—Ç–æ–∏—Ç –ø–∏—Ç—å {water} –º–ª –≤–æ–¥—ã –≤ –¥–µ–Ω—å\n –≠—Ç–æ —Ä–∞–≤–Ω—è–µ—Ç—Å—è {cups} —Å—Ç–∞–∫–∞–Ω–∞–º –≤–æ–¥—ã (~250 –º–ª)")

        job_id = f"water_reminder_{user_id}"

        scheduler.add_job(
            send_water_reminder,
            'interval',
            seconds=interval, 
            args=(user_id, bot, start_time, end_time),
            id=job_id
        )

        minutes = interval / 60

        await message.answer(f"–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –≤–∞–º –∫–∞–∂–¥—ã–µ {minutes} –º–∏–Ω—É—Ç –ø–∏—Ç—å –≤–æ–¥—É —Å {start_time} –¥–æ {end_time}!")
        await state.clear()

        now = datetime.now()

        end_time = datetime.strptime(message_time, "%H:%M").replace(year=now.year, month=now.month, day=now.day)

        if end_time < now:
            end_time += timedelta(days=1)

        initial_delay = (end_time - now).total_seconds()

        scheduler.add_job(send_water_result, IntervalTrigger(seconds=86400, start_date=end_time), args=[user_id, bot])
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑. –§–æ—Ä–º–∞—Ç: HH:MM")

@router.callback_query(lambda c: c.data == "drink_water")
async def disable_reminders(callback_query: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback_query.from_user.id
    add_water(db, user_id)


@router.callback_query(lambda c: c.data == "disable_reminders")
async def disable_reminders(callback_query: CallbackQuery, bot: Bot, scheduler: AsyncIOScheduler):
    user_id = callback_query.from_user.id

    job = scheduler.get_job(f"water_reminder_{user_id}")
    if job:
        job.remove()

    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(user_id, "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")



