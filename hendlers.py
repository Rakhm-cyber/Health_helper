from aiogram import Router, types
from aiogram.fsm.state import StatesGroup, State
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.types import CallbackQuery
from db import db, save_user_data
import asyncpg

user_states = {}

quiz_data = [
    {
        "question": "–í –∫–∞–∫–æ–º –º—è—Å–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ–ª–∫–∞?",
        "options": ["–ö—É—Ä–∏—Ü–∞", "–†—ã–±–∞", "–ì–æ–≤—è–¥–∏–Ω–∞"],
        "correct_option": 0  # –ò–Ω–¥–µ–∫—Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    },
    {
        "question": "—Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ–ª–æ–≤–µ–∫—É –≤ —Å—É—Ç–∫–∏?",
        "options": ["1-2 –ª–∏—Ç—Ä–∞", "2,5-3,5 –ª–∏—Ç—Ä–æ–≤ ", "–æ—Ç 3 –ª–∏—Ç—Ä–æ–≤"],
        "correct_option": 1
    },
    {
        "question": "–ì–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–µ—Ç—á–∞—Ç–∫–∏?",
        "options": ["–∫–∞–ø—É—Å—Ç–∞", "–¢–æ–º–∞—Ç—ã", "–§–∞—Å–æ–ª—å"],
        "correct_option": 2
    },
        {
        "question": "–ö–∞–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?",
        "options": ["–ô–æ–≥–∞", "–ë–µ–≥", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
        "correct_option": 1
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—Ç–æ–ª—è–µ—Ç –∂–∞–∂–¥—É?",
        "options": ["–ö–æ—Ñ–µ", "–°–ª–∞–¥–∫–∏–µ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", "–í–æ–¥–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –µ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –°?",
        "options": ["–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ö–∏–≤–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–∞—è –ø–∏—â–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã?",
        "options": ["–û—Ä–µ—Ö–∏", "–°–ª–∞–¥–∫–∏–µ –∏–∑–¥–µ–ª–∏—è", "–§–∞—Å—Ç—Ñ—É–¥"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–∏–±–æ–ª–µ–µ –±–æ–≥–∞—Ç –Ω–∞ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã?",
        "options": ["–õ–æ—Å–æ—Å—å", "–Ø–π—Ü–∞", "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—â–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤?",
        "options": ["–í–∞—Ä–∫–∞", "–û–±–∂–∞—Ä–∏–≤–∞–Ω–∏–µ", "–ü–∞—Ä–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –º–∏–Ω–µ—Ä–∞–ª–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è?",
        "options": ["–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ –±–µ–∑ –≥–∞–∑–æ–≤", "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ —Å –≥–∞–∑–æ–º", "–°–ª–∞–¥–∫–∞—è –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞"],
        "correct_option": 0
    }
]


router = Router()

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")],
        [KeyboardButton(text="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞")],
    ],
    resize_keyboard=True
)


recommendation_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ", callback_data="physical_recommendations"),
            InlineKeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é", callback_data="nutrition_recommendations"),
        ]
    ]
)

edit_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–æ–∑—Ä–∞—Å—Ç", callback_data="edit_age"),
        ],
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–æ—Å—Ç", callback_data="edit_height"),
        ],
        [
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤–µ—Å", callback_data="edit_weight"),
        ]
    ]
)


class EditProfile(StatesGroup):
    age = State()
    height = State()
    weight = State()


class Registration(StatesGroup):
    name = State()
    mob_number = State()
    age = State()
    gender = State()
    height = State()
    weight = State()


@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_project_info(message: types.Message):
    await message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ª–∏—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.")

@router.message(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: types.Message):
    await message.answer("–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º: [–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram](https://t.me/neeeeectdis)", parse_mode="Markdown")

@router.message(lambda message: message.text == "–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ –æ –∑–¥–æ—Ä–æ–≤—å–µ")
async def start_quiz(message: types.Message):
    user_states[message.from_user.id] = 0
    question_index = user_states[message.from_user.id]
    question_data = quiz_data[question_index]

    await message.answer(
        question_data["question"],
        reply_markup=generate_quiz_keyboard(question_index)
    )

def generate_quiz_keyboard(question_index: int):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã.
    """
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=f"quiz_{question_index}_{i}")]
        for i, option in enumerate(quiz_data[question_index]["options"])
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)





@router.callback_query(lambda callback: callback.data.startswith("quiz_"))
async def handle_quiz_answer(callback_query: types.CallbackQuery):
    _, question_index, option_index = callback_query.data.split("_")
    question_index = int(question_index)
    option_index = int(option_index)

    question_data = quiz_data[question_index]
    correct_option = question_data["correct_option"]

    if option_index == correct_option:
        await callback_query.message.edit_text("–í–µ—Ä–Ω–æ! üéâ")
    else:
        await callback_query.message.edit_text(
            f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}."
        )

    next_question_index = question_index + 1
    if next_question_index < len(quiz_data):
        user_states[callback_query.from_user.id] = next_question_index
        next_question_data = quiz_data[next_question_index]

        await callback_query.message.answer(
            next_question_data["question"],
            reply_markup=generate_quiz_keyboard(next_question_index)
        )
    else:
        await callback_query.message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üéâ")

    await callback_query.answer()



@router.message(CommandStart())
async def cmd_start(message: Message):
    await message.reply(
        f"–ü—Ä–∏–≤–µ—Ç.\n–¢–≤–æ–π ID: {message.from_user.id}\n–ò–º—è: {message.from_user.first_name}",
        reply_markup = main_keyboard
    )


@router.message(Command('registration'))
async def reg_first(message: Message, state: FSMContext):
    await state.set_state(Registration.name)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

@router.message(Registration.name)
async def reg_second(message: Message, state: FSMContext):
    await state.update_data(name=message.text)
    await state.set_state(Registration.mob_number)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')

@router.message(Registration.mob_number)
async def reg_third(message: Message, state: FSMContext):
    await state.update_data(mob_number=message.text)
    await state.set_state(Registration.age)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:')

@router.message(Registration.age)
async def reg_fourth(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
        return
    await state.update_data(age=message.text)
    await state.set_state(Registration.gender)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª(–º/–∂):')

@router.message(Registration.gender)
async def reg_fifth(message: Message, state: FSMContext):
    if message.text != "–º" and message.text != "–∂":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–æ–ª –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ(–º/–∂)")
        return
    await state.update_data(gender=message.text)
    await state.set_state(Registration.height)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç (–≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö):')  # –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å

@router.message(Registration.height)
async def reg_sixth(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (—á–∏—Å–ª–æ).")
        return
    await state.update_data(height=message.text)
    await state.set_state(Registration.weight)
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å:')

@router.message(Registration.weight)
async def reg_seventh(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤–µ—Å–∞
    await state.update_data(weight=message.text)

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö
    data = await state.get_data()
    print(data)  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    await save_user_data(
        db=db,
        user_id=message.from_user.id,
        name=data.get("name"),
        mob_number=data.get("mob_number"),
        age=int(data.get("age")),
        gender=data.get("gender"),
        height=int(data.get("height")),
        weight=int(data.get("weight"))
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=recommendation_keyboard
    )
    await state.clear()


@router.callback_query(lambda c: c.data == "physical_recommendations")
async def physical_recommendations(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    age = int(data.get("age", 0))
    gender = data.get("gender", "").lower()

    if age <= 17:
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–µ –º–µ–Ω–µ–µ 60 –º–∏–Ω—É—Ç –≤ –¥–µ–Ω—å –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é "
            "(–±–µ–≥, –∏–≥—Ä—ã, –∑–∞—Ä—è–¥–∫–∞ –∏ —Ç.–¥.), –≤–∫–ª—é—á–∞—è –∞—ç—Ä–æ–±–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É. –ù–µ –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –≤ "
            "–Ω–µ–¥–µ–ª—é —É–¥–µ–ª—è–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ —É–∫—Ä–µ–ø–ª–µ–Ω–∏—é –º—ã—à—Ü –∏ –∫–æ—Å—Ç–µ–π."
        )
    elif 18 <= age <= 64:
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 150‚Äì300 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é –∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é "
            "—Å—Ä–µ–¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ (—Ö–æ–¥—å–±–∞, –ø–ª–∞–≤–∞–Ω–∏–µ, —Ç–∞–Ω—Ü—ã –∏ —Ç.–¥.) –∏–ª–∏ 75‚Äì150 –º–∏–Ω—É—Ç "
            "–≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏. –¢–∞–∫–∂–µ –¥–æ–±–∞–≤—å—Ç–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è –º—ã—à—Ü –Ω–µ "
            "–º–µ–Ω–µ–µ 2 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é."
        )
    else:
        recommendation = (
            "–ü–æ–∂–∏–ª—ã–º –ª—é–¥—è–º —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è 150‚Äì300 –º–∏–Ω—É—Ç –≤ –Ω–µ–¥–µ–ª—é —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ "
            "—Å—Ä–µ–¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ –∏–ª–∏ 75‚Äì150 –º–∏–Ω—É—Ç –≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏. –î–æ–±–∞–≤—å—Ç–µ "
            "—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–≤–Ω–æ–≤–µ—Å–∏—è –∏ –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–∞–¥–µ–Ω–∏–π –Ω–µ –º–µ–Ω–µ–µ 3 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª—é."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä—É–∑–∫–µ:\n\n{recommendation}")
    await callback.answer()


@router.callback_query(lambda c: c.data == "nutrition_recommendations")
async def nutrition_recommendations(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    age = int(data.get("age", 0))  # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–æ–∑—Ä–∞—Å—Ç, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω

    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é (–ø—Ä–∏–º–µ—Ä)
    if age <= 17:
        recommendation = (
            "–î–ª—è –¥–µ—Ç–µ–π –∏ –ø–æ–¥—Ä–æ—Å—Ç–∫–æ–≤ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å "
            "—É–ø–æ—Ä–æ–º –Ω–∞ —Ñ—Ä—É–∫—Ç—ã, –æ–≤–æ—â–∏, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã –∏ –Ω–µ–∂–∏—Ä–Ω—ã–µ –±–µ–ª–∫–∏. "
            "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–ª–∞–¥–æ—Å—Ç–µ–π –∏ —Ñ–∞—Å—Ç—Ñ—É–¥–∞."
        )
    elif 18 <= age <= 64:
        recommendation = (
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ —Å –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–≤–æ—â–µ–π, "
            "—Ñ—Ä—É–∫—Ç–æ–≤, —Ü–µ–ª—å–Ω–æ–∑–µ—Ä–Ω–æ–≤—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –Ω–µ–∂–∏—Ä–Ω—ã—Ö –±–µ–ª–∫–æ–≤ –∏ –ø–æ–ª–µ–∑–Ω—ã—Ö –∂–∏—Ä–æ–≤. "
            "–û–≥—Ä–∞–Ω–∏—á—å—Ç–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–ª–∏, —Å–∞—Ö–∞—Ä–∞ –∏ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã—Ö –∂–∏—Ä–æ–≤."
        )
    else:
        recommendation = (
            "–ü–æ–∂–∏–ª—ã–º –ª—é–¥—è–º –≤–∞–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å –≤ —Ä–∞—Ü–∏–æ–Ω –ø—Ä–æ–¥—É–∫—Ç—ã, –±–æ–≥–∞—Ç—ã–µ –≤–∏—Ç–∞–º–∏–Ω–∞–º–∏ D –∏ B12, "
            "–∞ —Ç–∞–∫–∂–µ –∫–∞–ª—å—Ü–∏–µ–º –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∑–¥–æ—Ä–æ–≤—å—è –∫–æ—Å—Ç–µ–π. –ü–µ–π—Ç–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–¥—ã."
        )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback.message.answer(f"–í–∞—à–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é:\n\n{recommendation}")
    await callback.answer()


from db import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

@router.message(Command('profile'))
async def show_profile(message: Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º user_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    query = """
    SELECT name, mob_number, age, gender, height, weight
    FROM users
    WHERE user_id = $1
    """
    user_data = await db.fetch(query, user_id)

    if not user_data:
        await message.answer("–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—É—Å—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–æ–º–∞–Ω–¥–æ–π /registration.")
        return
    user_data = user_data[0]
    profile_text = (
        f"–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n"
        f"–ò–º—è: {user_data['name'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_data['mob_number'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user_data['age'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–ü–æ–ª: {user_data['gender'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–†–æ—Å—Ç: {user_data['height'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"–í–µ—Å: {user_data['weight'] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ, –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /edit –∏ –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å."
    )

    await message.answer(profile_text)




@router.message(Command('edit'))
async def edit_profile(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:", reply_markup=edit_keyboard)

@router.callback_query(lambda c: c.data == "edit_age")
async def edit_age(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(EditProfile.age)
    await callback.answer()

@router.message(EditProfile.age)
async def update_age(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (—á–∏—Å–ª–æ).")
        return

    new_age = int(message.text)
    user_id = message.from_user.id

    # –û–±–Ω–æ–≤–ª—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    query = "UPDATE users SET age = $1 WHERE user_id = $2"
    await db.execute(query, new_age, user_id)

    await message.answer("–í–∞—à –≤–æ–∑—Ä–∞—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω.")
    await state.clear()




@router.callback_query(lambda c: c.data == "edit_weight")
async def edit_weight(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö):")
    await state.set_state(Registration.weight)
    await callback.answer()

@router.message(Registration.weight)
async def update_weight(message: Message, state: FSMContext):
    if not message.text.isdigit() or int(message.text) <= 0:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (—á–∏—Å–ª–æ).")
        return
    await state.update_data(weight=message.text)
    await message.answer("–í–∞—à –≤–µ—Å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω.")





