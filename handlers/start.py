from handlers.handler import router
from database import repository

from aiogram import types
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

user_states = {}

class QuizState(StatesGroup):
    in_quiz = State()

quiz_data = [
    {
        "question": "–í –∫–∞–∫–æ–º –º—è—Å–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ–ª–∫–∞?",
        "options": ["–ö—É—Ä–∏—Ü–∞", "–†—ã–±–∞", "–ì–æ–≤—è–¥–∏–Ω–∞"],
        "correct_option": 0 
    },
    {
        "question": "—Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á–µ–ª–æ–≤–µ–∫—É –≤ —Å—É—Ç–∫–∏?",
        "options": ["1-2 –ª–∏—Ç—Ä–∞", "2,5-3,5 –ª–∏—Ç—Ä–æ–≤ ", "–æ—Ç 3 –ª–∏—Ç—Ä–æ–≤"],
        "correct_option": 1
    },
    {
        "question": "–ì–¥–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∫–ª–µ—Ç—á–∞—Ç–∫–∏?",
        "options": ["–∫–∞–ø—É—Å—Ç–∞", "–¢–æ–º–∞—Ç—ã", "–§–∞—Å–æ–ª—å"],
        "correct_option": 2
    },
        {
        "question": "–ö–∞–∫–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞–∏–±–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–∞ –¥–ª—è –ø–æ—Ö—É–¥–µ–Ω–∏—è?",
        "options": ["–ô–æ–≥–∞", "–ë–µ–≥", "–°–∏–ª–æ–≤—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏"],
        "correct_option": 1
    },
    {
        "question": "–ö–∞–∫–æ–π –Ω–∞–ø–∏—Ç–æ–∫ –ª—É—á—à–µ –≤—Å–µ–≥–æ —É—Ç–æ–ª—è–µ—Ç –∂–∞–∂–¥—É?",
        "options": ["–ö–æ—Ñ–µ", "–°–ª–∞–¥–∫–∏–µ –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø–∏—Ç–∫–∏", "–í–æ–¥–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –µ–¥–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∏–±–æ–ª—å—à–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∏—Ç–∞–º–∏–Ω–∞ –°?",
        "options": ["–ê–ø–µ–ª—å—Å–∏–Ω—ã", "–ö–∞—Ä—Ç–æ—Ñ–µ–ª—å", "–ö–∏–≤–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–∞—è –ø–∏—â–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è —Å–µ—Ä–¥–µ—á–Ω–æ-—Å–æ—Å—É–¥–∏—Å—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã?",
        "options": ["–û—Ä–µ—Ö–∏", "–°–ª–∞–¥–∫–∏–µ –∏–∑–¥–µ–ª–∏—è", "–§–∞—Å—Ç—Ñ—É–¥"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –Ω–∞–∏–±–æ–ª–µ–µ –±–æ–≥–∞—Ç –Ω–∞ –æ–º–µ–≥–∞-3 –∂–∏—Ä–Ω—ã–µ –∫–∏—Å–ª–æ—Ç—ã?",
        "options": ["–õ–æ—Å–æ—Å—å", "–Ø–π—Ü–∞", "–ì—Ä–µ—Ü–∫–∏–µ –æ—Ä–µ—Ö–∏"],
        "correct_option": 0
    },
    {
        "question": "–ö–∞–∫–æ–π —Å–ø–æ—Å–æ–± –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –ø–∏—â–∏ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–µ–Ω –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∏—Ç–∞–º–∏–Ω–æ–≤?",
        "options": ["–í–∞—Ä–∫–∞", "–û–±–∂–∞—Ä–∏–≤–∞–Ω–∏–µ", "–ü–∞—Ä–æ–≤–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞"],
        "correct_option": 2
    },
    {
        "question": "–ö–∞–∫–∞—è –º–∏–Ω–µ—Ä–∞–ª–∫–∞ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è?",
        "options": ["–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ –±–µ–∑ –≥–∞–∑–æ–≤", "–ú–∏–Ω–µ—Ä–∞–ª—å–Ω–∞—è –≤–æ–¥–∞ —Å –≥–∞–∑–æ–º", "–°–ª–∞–¥–∫–∞—è –≥–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–æ–¥–∞"],
        "correct_option": 0
    }
]

main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")],
        [KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞"), KeyboardButton(text="–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å")],
        [KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"), KeyboardButton(text="–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é")],
    ],
    resize_keyboard=True,
    one_time_keyboard=True
)

@router.message(CommandStart())
async def start(message: Message, state: FSMContext):
    user = await repository.get_user(message.from_user.id)
    if user:
        user_name = user[0]['name']
    else:
        user_name = message.from_user.first_name
    
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {user_name}!\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ. –í–æ—Ç, —á—Ç–æ —è –º–æ–≥—É:\n - –ù–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –≤—Å–µ–≥–¥–∞ –ø–∏—Ç—å –≤–æ–¥—É /water_remind\n - –ö–∞–∂–¥—ã–π –≤–µ—á–µ—Ä —è –±—É–¥—É –æ–ø—Ä–∞—à–∏–≤–∞—Ç—å —Ç–µ–±—è –æ —Ç–≤–æ–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, —á—Ç–æ–±—ã –≤ –∫–æ–Ω—Ü–µ –Ω–µ–¥–µ–ª–∏ —Ç—ã —Å–º–æ–≥ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–∫ –º–µ–Ω—è–ª–∏—Å—å —Ç–≤–æ–∏ —É—Ä–æ–≤–Ω–∏ —Ñ–∏–∑. –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —Å—Ç—Ä–µ—Å—Å–∞, —Å–Ω–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è /report\n - –î–∞–≤–∞—Ç—å —Ç–µ–±–µ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –ø–∏—Ç–∞–Ω–∏—é\n - –ü—Ä–æ–≤–æ–¥–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —á—Ç–æ–±—ã —Ç—ã –ø–æ–≤—ã—à–∞–ª —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ /quiz\n - –û–∫–∞–∑—ã–≤–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É\n - –ü—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –æ –∑–¥–æ—Ä–æ–≤–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏ –∏ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç—ã!\n\n –ù–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–µ—Å—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª -> /registration",
        reply_markup = main_keyboard
    )

@router.message(lambda message: message.text == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ")
async def handle_project_info(message: types.Message, state: FSMContext):
    if state:
        return

    await message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ:\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø–æ–º–æ—â–∏ –ª—é–¥—è–º –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –ª–∏—á–Ω–æ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è.\n"
        "–ü—Ä–æ–µ–∫—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω –≤ —Ä–∞–º–∫–∞—Ö –Ω–∞—É—á–Ω–æ-–∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–µ–º–∏–Ω–∞—Ä–∞"
        '"–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç –≤ –∏–Ω–∂–µ–Ω–µ—Ä–Ω–æ–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–∏"'
        "–ú–ò–≠–ú –ù–ò–£ –í–®–≠ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –≥—Ä—É–ø–ø—ã –ë–ò–í234:\n"
        "- –ù–∞—É–º–æ–≤—ã–º –í–∏—Ç–∞–ª–∏–µ–º\n"
        "- –†–∞—Ö–º–∞—Ç—É–ª–ª–∏–Ω—ã–º –ê–π–≥–∏–∑–æ–º."
    )


@router.message(lambda message: message.text == "–ü–æ–¥–¥–µ—Ä–∂–∫–∞")
async def handle_support(message: types.Message, state: FSMContext):
    if state:
        return

    await message.answer(
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–º:\n"
        "[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram (1)](https://t.me/neeeeectdis)\n"
        "[–ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram (2)](https://t.me/veetalya)",
        parse_mode="Markdown"
    )


@router.message(Command("quiz"))
async def start_quiz(message: types.Message, state: FSMContext):
    user_states[message.from_user.id] = 0
    question_index = user_states[message.from_user.id]
    question_data = quiz_data[question_index]

    await state.set_state(QuizState.in_quiz)

    await message.answer(
        question_data["question"],
        reply_markup=generate_quiz_keyboard(question_index)
    )

def generate_quiz_keyboard(question_index: int):
    buttons = [
        [InlineKeyboardButton(text=option, callback_data=f"quiz_{question_index}_{i}")]
        for i, option in enumerate(quiz_data[question_index]["options"])
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@router.callback_query(lambda callback: callback.data.startswith("quiz_"))
async def handle_quiz_answer(callback_query: types.CallbackQuery, state: FSMContext):
    _, question_index, option_index = callback_query.data.split("_")
    question_index = int(question_index)
    option_index = int(option_index)

    question_data = quiz_data[question_index]
    correct_option = question_data["correct_option"]

    if option_index == correct_option:
        await callback_query.message.edit_text("–í–µ—Ä–Ω–æ! üéâ")
    else:
        await callback_query.message.edit_text(
            f"–ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question_data['options'][correct_option]}."
        )

    next_question_index = question_index + 1
    if next_question_index < len(quiz_data):
        user_states[callback_query.from_user.id] = next_question_index
        next_question_data = quiz_data[next_question_index]

        await callback_query.message.answer(
            next_question_data["question"],
            reply_markup=generate_quiz_keyboard(next_question_index)
        )
    else:
        await state.clear()
        await callback_query.message.answer("–í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É! üéâ")

    await callback_query.answer()
